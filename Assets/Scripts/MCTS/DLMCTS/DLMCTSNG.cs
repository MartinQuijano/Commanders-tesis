using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DLMCTSNG : DLMCTS
{
    public NodeActionsGenerator nodeActionsGenerator;

    protected override IEnumerator MCTSearchCR(GameState initialState)
    {
        amountOfChildsComputed = 0;
        TreeNode<GameState> root = new TreeNode<GameState>(initialState);
        TreeNode<GameState> currentNode;
        double reward;

        List<List<Action>> listsOfActionsForNodes = nodeActionsGenerator.GenerateActions(root.Data.MyTeam);
        GameState gameState;
        Unit unit;

        //     Debug.Log("-----------");
        foreach (List<Action> actions in listsOfActionsForNodes)
        {
            /*  Debug.Log("$$$$$$ Mostrar acciones a agregar a un nodo $$$$$$");
              foreach (Action action in actions)
              {
                  Debug.Log(action.GetString());
              }
              Debug.Log("$$$$$$ Mostrar acciones a agregar a un nodo $$$$$$");*/

            gameState = new GameState();
            gameState.currentPlayer = initialState.currentPlayer;

            gameState.TakenActionsToThisState.AddRange(actions);

            foreach (Unit character in root.Data.EnemyTeam)
            {
                Unit unidad = Instantiate(character, new Vector3(0, 15, 0), Quaternion.identity, clonedUnitsContainer.transform);
                gameState.EnemyTeam.Add(unidad);
            }

            foreach (Unit character in root.Data.MyTeam)
            {
                unit = Instantiate(character, new Vector3(0, 15, 0), Quaternion.identity, clonedUnitsContainer.transform);
                gameState.MyTeam.Add(unit);
                foreach (Action action in gameState.TakenActionsToThisState)
                {
                    if (action.originalUnit == character)
                        action.unit = unit;
                }
            }

            foreach (Action action in gameState.TakenActionsToThisState)
            {
                action.SimulateExpansion(gameState, IAMCTSController.playerNumber);
            }

            currentNode = root.AddChild(gameState);

            if (initialState.currentPlayer == 1)
                currentNode.Data.currentPlayer = 2;
            else
                currentNode.Data.currentPlayer = 1;

            reward = DefaultPolicy(currentNode.Data);
            ClearSimulationObjects();
            ClearClonedObjects();
            Backup(currentNode, reward);
            amountOfChildsComputed++;
            yield return null;
        }
        Debug.Log(" Amount of childs generated by NAG:" + amountOfChildsComputed);

        while (InComputationalBudget())
        {
            currentNode = Expand(root);
            reward = DefaultPolicy(currentNode.Data);
            ClearSimulationObjects();
            ClearClonedObjects();
            Backup(currentNode, reward);
            amountOfChildsComputed++;

            yield return null;
        }

        /*    foreach (TreeNode<GameState> tngs in root.Children)
            {
                Debug.Log("Reward: " + tngs.Reward);
                Debug.Log("DmgBasedReward: " + tngs.Data.dmgBasedReward);
                Debug.Log("Position reward: " + tngs.Data.localReward);
                Debug.Log("ScoreForEnemiesInRangeOfAttack: " + tngs.Data.ScoreForEnemiesInRangeOfAttackValue);
                Debug.Log("ScoreForEnemiesThatCanAttack: " + tngs.Data.ScoreForEnemiesThatCanAttackValue);
                Debug.Log("ScoreForUnitsThatCanBeKilled: " + tngs.Data.ScoreForUnitsThatCanBeKilledValue);
                Debug.Log("ScoreForEnemiesThatCanEnterInRangeOfAttack: " + tngs.Data.ScoreForEnemiesThatCanEnterInRangeOfAttackValue);
                Debug.Log("Acciones:");
                foreach (Action action in tngs.Data.TakenActionsToThisState)
                {
                    Debug.Log(action.GetString());
                }
            }
    */
        TreeNode<GameState> bestNode = ChildWithBestReward(root);
        listOfActionsToPlay = bestNode.Data.TakenActionsToThisState;

        /*   Debug.Log("------------------------");
           Debug.Log("Best reward: " + bestNode.Reward);
           Debug.Log("DmgBasedReward: " + bestNode.Data.dmgBasedReward);
           Debug.Log("Position reward: " + bestNode.Data.localReward);
           Debug.Log("ScoreForEnemiesInRangeOfAttack: " + bestNode.Data.ScoreForEnemiesInRangeOfAttackValue);
           Debug.Log("ScoreForEnemiesThatCanAttack: " + bestNode.Data.ScoreForEnemiesThatCanAttackValue);
           Debug.Log("ScoreForUnitsThatCanBeKilled: " + bestNode.Data.ScoreForUnitsThatCanBeKilledValue);
           Debug.Log("ScoreForEnemiesThatCanEnterInRangeOfAttack: " + bestNode.Data.ScoreForEnemiesThatCanEnterInRangeOfAttackValue);
   */
        foreach (Action action in listOfActionsToPlay)
        {
            Debug.Log(action.GetString());
        }

        ClearClonedObjects();
        IAMCTSController.ExecuteActions(listOfActionsToPlay);
    }
}